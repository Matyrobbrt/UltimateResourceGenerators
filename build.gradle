buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
		classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
	id 'org.cadixdev.licenser' version '0.6.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '${version}'
group = 'com.matyrobbrt.urg'
archivesBaseName = '${mod_id}-${mc_version}'

mixin {
    add sourceSets.main, "urg.refmap.json"
    config "urg.mixins.json"
    
    debug.verbose = true
    debug.export = true
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2021.10.17-1.16.5'
  
    runs {
        client {
            workingDirectory project.file('run/client')
            arg "-mixin.config=urg.mixins.json"

            mods {
                urg {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            arg "-mixin.config=urg.mixins.json"

            mods {
                urg {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')
            arg "-mixin.config=urg.mixins.json"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'urg', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                urg {
                    source sourceSets.main
                }
            }
        }
    }
}

license {
	header = file("$rootDir/header.txt")
	properties {
        name = 'Matyrobbrt'
        year = 2021
    }

	include '**/*.java'
	
	style {
    	java = 'JAVADOC'
    }

    tasks {
    	main {
    		files.from files("$rootDir/src/main/java")
    	}
    }
}


def replaceResources = tasks.register("replaceResources", Copy) {
	it.outputs.upToDateWhen { false }
	//Copy it into the build dir
	it.from(sourceSets.main.resources) {
		include "META-INF/mods.toml"
		expand 'version': version
	}
	it.into "$buildDir/resources/main/"
}

classes.configure {
	dependsOn(replaceResources)
}

processResources {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	exclude('META-INF/mods.toml')
	configure { finalizedBy(replaceResources) }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
	maven {
		url "https://dl.cloudsmith.io/public/matyrobbrt/matylib/maven/"
	}
	maven {
	   	name 'tterrag maven'
	   	url "http://maven.tterrag.com/"
	   	allowInsecureProtocol = true
	}
	maven {
		url "https://www.cursemaven.com"
	}
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.20'
	
	implementation fg.deobf("com.matyrobbrt:matylib-${mc_version}:${matylib_version}")
	
	implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}") {
    	transitive = false
    })
    
    runtimeOnly fg.deobf("curse.maven:usrg-307693:3188219")
    
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "UltimateResourceGenerators",
            "Specification-Vendor": "matyrobbrt",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "urg",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"matyrobbrt",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "urg.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar') 
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
